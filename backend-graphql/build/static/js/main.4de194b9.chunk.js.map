{"version":3,"sources":["utils/labelsFormatter.js","components/Login.jsx","components/Logout.jsx","components/Register.jsx","components/Calendar/GraphQL.js","components/Calendar/Edit.jsx","components/Calendar/Cell.jsx","components/Calendar/Column.jsx","components/Calendar/Row.jsx","components/Calendar/Controls.jsx","components/Calendar/Header.jsx","components/Calendar/TaskSearch.jsx","components/Calendar/AddHourlogModal.jsx","components/Calendar/index.js","components/Calendar/Calendar.jsx","components/SideBar.jsx","components/Loader.jsx","components/Project/ProjectHeader.jsx","components/Project/TaskColor.jsx","components/Project/ProjectFooter.jsx","components/Project/TaskCell.jsx","components/Project/ProjectTable.jsx","components/Project/AddForm.jsx","components/Project/AddProject.jsx","components/Project/Project.jsx","components/Project/index.jsx","components/User/Pay.jsx","components/User/User.jsx","components/User/index.jsx","components/Report/ReportMenu.jsx","components/Report/ReportTable.jsx","components/Report/TimelineBar.jsx","components/Report/ReportChart.jsx","components/Report/ProjectDashboard.jsx","components/Report/Report.jsx","components/Report/index.jsx","App.js","index.js"],"names":["colorLabels","id","color","getColorById","find","module","exports","timeLabel","desimal","hour","minutes","concat","getRandomColor","randomInt","Math","floor","random","LOGIN","gql","_templateObject","Login","_ref","setCurrentUser","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","username","setUsername","_useState5","_useState6","password","setPassword","_useState7","_useState8","fieldError","setFieldError","login","useMutation","token","localStorage","getItem","user","jwtDecode","handleSUbmit","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","_ref3","data","wrap","_context","prev","next","variables","sent","setTimeout","setItem","value","t0","abrupt","stop","apply","this","arguments","react_default","createElement","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header_Header","as","Form","size","Segment","Dimmer","active","inverted","Loader_Loader","Input","fluid","onChange","_ref4","target","icon","iconPosition","placeholder","error","_ref5","type","Button","onClick","disabled","Message","react_router_dom","to","Logout","client","useApolloClient","useEffect","removeItem","resetStore","undefined","CREATE_USER","Register_templateObject","Register","name","setName","_useState9","_useState10","register","createUser","_ref6","GET_TASKS","GraphQL_templateObject","MY_HOURLOGS","_templateObject2","CREATE_HOURLOG","_templateObject3","UPDATE_HOURLOG","_templateObject4","DELETE_HOURLOG","_templateObject5","Edit","hourlog","setEdit","refetch","hours","setHours","deleteHourlog","updateHourlog","handleDelete","handleEdit","_callee2","_context2","className","es","allowEmpty","defaultValue","moment","defaultOpenValue","minute","showSecond","minuteStep","Group","content","Cell","edit","task","classes","project","Calendar_Edit","hourlogs","header","setOpen","setDate","total_hours","reduce","accum","log","Fragment","format","map","key","Calendar_Cell","toString","Row","groupedHourlogs","keys","Calendar_Column","Controls","selectedModay","setSelectedMonday","label","subtract","add","Header","currentUser","weekly_hours","myHourlogs","TaskSearch","tasks","setTaskId","setDescription","results","setResults","cathegorise","allTasks","objectSpread","title","Search","input","minCharacters","category","onResultSelect","e","result","description","onSearchChange","_","debounce","FuzzySearch","sort","search","groupBy","leading","resultRenderer","categoryRenderer","Label","AddHourlogModal","open","date","taskId","useQuery","createHourlog","handleSubmit","Modal","onClose","Content","Field","Calendar_TaskSearch","Actions","Calendar","_groupedHourlogs","startOf","dateFrom","dateTo","getDayFormat","day","defineProperty","forEach","push","Calendar_Header","Calendar_Controls","Calendar_Row","Calendar_AddHourlogModal","SideBar","admin","Sidebar","Menu","animation","vertical","visible","width","Item","Image","src","centered","NavLink","Icon","Loader","UPDATE_PROJECT","ProjectHeader_templateObject","ProjectHeader","editMode","setEditMode","projects","success","setSuccess","setError","updateProject","ButtonGroup","float","TaskColor","setColor","c","CREATE_TASK","ProjectFooter_templateObject","ProjectFooter","_useState11","_useState12","createTask","handelSubmit","_callee3","_context3","projectId","Table","Footer","HeaderCell","colSpan","Project_TaskColor","labelPosition","UPDATE_TASK","TaskCell_templateObject","TaskCell","updateTask","handeleSubmit","dropdownOptions","text","Dropdown","options","selection","pointing","ProjectTable","celled","striped","Project_ProjectHeader","Body","Project_TaskCell","Project_ProjectFooter","CREATE_PROJECT","AddForm_templateObject","AddForm","message","setMessage","createProject","handleDismiss","onDismiss","AddProject","marginBottom","Project_AddForm","GET_PROJECTS","Project_templateObject","Project","components_Loader","Project_AddProject","allProjects","p","Project_ProjectTable","UPDATE_PAY","Pay_templateObject","Pay","users","pay","setPay","updatePay","payByHour","parseFloat","action","actionPosition","ALL_USERS","User_templateObject","GRANT_ADMIN","User_templateObject2","User","setUser","grantAdmin","handleConfirm","console","allUsers","handleAdminGrant","User_Pay","Confirm","onCancel","onConfirm","ReportMenu","props","setDateFrom","setDateTo","match","url","attached","build","multiple","settings","start","min","max","step","month","handleMonthSlider","year","ReportTable","totalCost","cost","fontWeight","GET_HOURLOGS","TimelineBar_templateObject","PROJECT_HOURLOGS","TimelineBar_templateObject2","TimelineBar","query_string","query","dataString","firstMonth","lastMonth","months","groupByMonth","values","timelineData","labels","datasets","backgroundColor","react_chartjs_2_es","legend","display","ReportChart","redirect","setRedirect","handlePieClick","_index","hourData","costData","react_router","Container","onElementsClick","position","Report_TimelineBar","PROJECT_BY_ID","ProjectDashboard_templateObject","ProjectDashboard","projectById","t","List","Description","ALL_PROJECTS","Report_templateObject","Report","endOf","Report_ReportMenu","path","render","Report_ReportTable","Report_ReportChart","Report_ProjectDashboard","params","App","components_SideBar","components_Calendar","components_User","components_Report","components_Logout","components_Project","components_Login","components_Register","wsLink","WebSocketLink","uri","reconnect","httpLink","createHttpLink","authLink","setContext","headers","x-auth-token","link","split","_getMainDefinition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","react_apollo_esm","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4de194b9.chunk.js","sourcesContent":["const timeLabel = desimal => {\n  if (desimal >= 1) {\n    let hour = desimal - (desimal % 1)\n    if (desimal % 1 > 0) {\n      let minutes = (desimal % 1) * 60\n      return `${hour} h ${minutes} min`\n    } else {\n      return `${hour} h`\n    }\n  } else {\n    let minutes = (desimal % 1) * 60\n    return `${minutes} min`\n  }\n}\n\nconst colorLabels = [\n  { id: 0, color: '#df7ace' },\n  { id: 1, color: '#37bc9b' },\n  { id: 2, color: '#4a89dc' },\n  { id: 3, color: '#da4453' },\n  { id: 4, color: '#8cc152' },\n  { id: 5, color: '#f6bb42' },\n  { id: 6, color: '#e9573f' },\n  { id: 7, color: '#967adc' },\n  { id: 8, color: '#d770ad' },\n  { id: 9, color: '#434a54' },\n  { id: 10, color: '#3bafda' },\n  { id: 11, color: '#ab8ce4' },\n  { id: 12, color: '#26c6da' },\n  { id: 13, color: '#00c292' },\n  { id: 14, color: '#4099ff' },\n  { id: 15, color: '#9bc6f8' }\n]\n\nconst getColorById = id => {\n  const item = colorLabels.find(color => color.id === id)\n  return item.color\n}\n\nconst getRandomColor = () => {\n  const randomInt = Math.floor(Math.random() * 15)\n  const color = getColorById(randomInt)\n  return color\n}\n\nmodule.exports = { timeLabel, colorLabels, getColorById, getRandomColor }\n","import React, { useState } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useMutation } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport jwtDecode from 'jwt-decode'\nimport { Button, Form, Grid, Header, Loader } from 'semantic-ui-react'\nimport { Message, Segment, Dimmer } from 'semantic-ui-react'\n\nconst LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      value\n    }\n  }\n`\n\nconst Login = ({ setCurrentUser }) => {\n  const [loading, setLoading] = useState(false)\n  const [username, setUsername] = useState()\n  const [password, setPassword] = useState()\n  const [fieldError, setFieldError] = useState(false)\n\n  const login = useMutation(LOGIN)\n\n  const token = localStorage.getItem('token')\n  if (token) {\n    const user = jwtDecode(token)\n    setCurrentUser(user)\n  }\n\n  const handleSUbmit = async () => {\n    setLoading(true)\n    try {\n      const { data } = await login({ variables: { username, password } })\n      setTimeout(() => {\n        localStorage.setItem('token', data.login.value)\n        const user = jwtDecode(data.login.value)\n        setLoading(false)\n        setCurrentUser(user)\n      }, 1000)\n    } catch (exeption) {\n      setLoading(false)\n      setFieldError(true)\n      setTimeout(() => setFieldError(false), 5000)\n      return\n    }\n  }\n  return (\n    <div>\n      <Grid\n        textAlign=\"center\"\n        style={{ height: '100vh' }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n            Log-in to your account\n          </Header>\n          <Form size=\"large\">\n            <Segment>\n              <Dimmer active={loading} inverted>\n                <Loader />\n              </Dimmer>\n\n              <Form.Input\n                fluid\n                onChange={({ target }) => setUsername(target.value)}\n                icon=\"male\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                error={fieldError}\n              />\n              <Form.Input\n                fluid\n                onChange={({ target }) => setPassword(target.value)}\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                type=\"password\"\n                error={fieldError}\n              />\n\n              <Button\n                onClick={handleSUbmit}\n                color=\"teal\"\n                fluid\n                size=\"large\"\n                disabled={!password || !username}\n              >\n                Login\n              </Button>\n            </Segment>\n          </Form>\n          <Message>\n            New user? <NavLink to=\"/register\">Sign Up</NavLink>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Login\n","import { useEffect } from 'react'\nimport { useApolloClient } from 'react-apollo-hooks'\n\nconst Logout = ({ setCurrentUser }) => {\n  const client = useApolloClient()\n\n  useEffect(() => {\n    localStorage.removeItem('token')\n    client.resetStore()\n    setCurrentUser(undefined)\n  })\n  return null\n}\n\nexport default Logout\n","import React, { useState } from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport jwtDecode from 'jwt-decode'\nimport { Button, Form, Grid, Header, Loader } from 'semantic-ui-react'\nimport { Segment, Dimmer } from 'semantic-ui-react'\n\nconst CREATE_USER = gql`\n  mutation createUser($username: String!, $name: String!, $password: String!) {\n    createUser(username: $username, name: $name, password: $password) {\n      value\n    }\n  }\n`\n\nconst Register = ({ setCurrentUser }) => {\n  const [loading, setLoading] = useState(false)\n  const [username, setUsername] = useState()\n  const [name, setName] = useState()\n  const [password, setPassword] = useState()\n  const [fieldError, setFieldError] = useState(false)\n\n  const register = useMutation(CREATE_USER)\n\n  const handleSUbmit = async () => {\n    setLoading(true)\n    try {\n      const { data } = await register({\n        variables: { username, name, password }\n      })\n      setTimeout(() => {\n        const token = data.createUser.value\n        localStorage.setItem('token', token)\n        const user = jwtDecode(token)\n        setLoading(false)\n        setCurrentUser(user)\n      }, 1000)\n    } catch (exeption) {\n      setLoading(false)\n      setFieldError(true)\n      setTimeout(() => setFieldError(false), 5000)\n      return\n    }\n  }\n  return (\n    <div>\n      <Grid\n        textAlign=\"center\"\n        style={{ height: '100vh' }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n            Register now\n          </Header>\n          <Form size=\"large\">\n            <Segment>\n              <Dimmer active={loading} inverted>\n                <Loader />\n              </Dimmer>\n\n              <Form.Input\n                fluid\n                onChange={({ target }) => setUsername(target.value)}\n                icon=\"male\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                error={fieldError}\n              />\n              <Form.Input\n                fluid\n                onChange={({ target }) => setName(target.value)}\n                icon=\"pencil alternate\"\n                iconPosition=\"left\"\n                placeholder=\"Name\"\n                error={fieldError}\n              />\n              <Form.Input\n                fluid\n                onChange={({ target }) => setPassword(target.value)}\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder=\"Password\"\n                type=\"password\"\n                error={fieldError}\n              />\n\n              <Button\n                onClick={handleSUbmit}\n                color=\"teal\"\n                fluid\n                size=\"large\"\n                disabled={!password || !username || !name}\n              >\n                Submit\n              </Button>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Register\n","import { gql } from 'apollo-boost'\n\nexport const GET_TASKS = gql`\n  {\n    allTasks {\n      id\n      name\n      description\n      project {\n        name\n      }\n    }\n  }\n`\n\nexport const MY_HOURLOGS = gql`\n  query myHourlogs($dateFrom: String!, $dateTo: String!) {\n    myHourlogs(dateFrom: $dateFrom, dateTo: $dateTo) {\n      id\n      hours\n      date\n      task {\n        id\n        name\n        color\n        project {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_HOURLOG = gql`\n  mutation createHourlog($taskId: String!, $hours: Float!, $date: String!) {\n    createHourlog(taskId: $taskId, hours: $hours, date: $date) {\n      id\n      hours\n      date\n      task {\n        name\n        id\n        project {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOURLOG = gql`\n  mutation updateHourlog($id: String!, $hours: Float, $date: String) {\n    updateHourlog(id: $id, hours: $hours, date: $date) {\n      id\n      hours\n      date\n      task {\n        name\n        id\n        project {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_HOURLOG = gql`\n  mutation deleteHourlog($id: String!) {\n    deleteHourlog(id: $id)\n  }\n`\n","import React, { useState } from 'react'\nimport { Button } from 'semantic-ui-react'\nimport moment from 'moment'\nimport TimePicker from 'rc-time-picker'\nimport { useMutation } from 'react-apollo-hooks'\nimport { DELETE_HOURLOG, UPDATE_HOURLOG } from './GraphQL'\n\nconst Edit = ({ hourlog, setEdit, refetch }) => {\n  const [hours, setHours] = useState(hourlog.hours)\n\n  const deleteHourlog = useMutation(DELETE_HOURLOG)\n  const updateHourlog = useMutation(UPDATE_HOURLOG)\n\n  const handleTime = value => {\n    if (!value) return setHours(null)\n    setHours(value.hours() + value.minutes() / 60)\n  }\n\n  const handleDelete = async () => {\n    await deleteHourlog({ variables: { id: hourlog.id } })\n    refetch.refetch()\n    setEdit(false)\n  }\n\n  const handleEdit = async () => {\n    await updateHourlog({ variables: { id: hourlog.id, hours } })\n    setEdit(false)\n  }\n\n  return (\n    <div>\n      <Button as=\"div\" className=\"center\" fluid>\n        <TimePicker\n          allowEmpty={false}\n          onChange={handleTime}\n          defaultValue={moment()\n            .hours(Math.floor(hours))\n            .minutes((hours % 1) * 60)}\n          defaultOpenValue={moment()\n            .hour(0)\n            .minute(0)}\n          showSecond={false}\n          minuteStep={15}\n        />\n      </Button>\n      <Button.Group size=\"tiny\" fluid>\n        <Button\n          onClick={() => handleDelete()}\n          icon=\"trash alternate\"\n          content=\"Delete\"\n          color=\"red\"\n        />\n        <Button onClick={() => handleEdit()} icon=\"save\" content=\"Save\" color=\"blue\" />\n      </Button.Group>\n    </div>\n  )\n}\n\nexport default Edit\n","import React, { useState } from 'react'\nimport Edit from './Edit'\nimport { timeLabel } from '../../utils/labelsFormatter'\n\nconst Cell = ({ hourlog, refetch }) => {\n  const [edit, setEdit] = useState(false)\n  const { task, hours } = hourlog\n  const color = task.color\n  const classes = `ts-cell color-${color}`\n  return (\n    <div className={classes}>\n      <div className=\"ts-cell-title\">\n        {task.project.name}\n        <i onClick={() => setEdit(!edit)} className=\"fa fa-cog\" />\n      </div>\n      {edit && <Edit hourlog={hourlog} setEdit={setEdit} refetch={refetch} />}\n      <div className=\"ts-cell-content\">{task.name}</div>\n      <div className=\"ts-cell-time\">\n        <i className=\"fa fa-clock-o\" />\n        {' ' + timeLabel(hours)}\n      </div>\n    </div>\n  )\n}\n\nexport default Cell\n","import React from 'react'\nimport moment from 'moment'\nimport Cell from './Cell'\nimport { timeLabel } from '../../utils/labelsFormatter'\n\nconst Column = ({ hourlogs, header, setOpen, setDate, refetch }) => {\n  let classes = 'ts-col'\n\n  const handleModalOpen = () => {\n    setDate(header.toString())\n    setOpen(true)\n  }\n\n  const total_hours = timeLabel(hourlogs.reduce((accum, log) => (accum += log.hours), 0))\n  return (\n    <React.Fragment>\n      <div className=\"ts-col-container\">\n        <div className={classes}>\n          <div className=\"ts-col ts-col-head\">\n            <h4>{moment(header).format('dddd')}</h4>\n            {total_hours}\n          </div>\n          {hourlogs.map((log, key) => {\n            return <Cell key={key} hourlog={log} refetch={refetch} />\n          })}\n          <div className=\"ts-col-addbtn\">\n            <p>\n              <i className=\"fa fa-plus-square fa-lg\" onClick={() => handleModalOpen()} />\n            </p>\n          </div>\n        </div>\n        <div className=\"ts-col-date\">{moment(header).format('ddd D.M.')}</div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default Column\n","import React from 'react'\nimport Column from './Column'\n\nconst Row = ({ groupedHourlogs, setOpen, setDate, refetch }) => {\n  return (\n    <div className=\"flex-container space-evenly\">\n      {Object.keys(groupedHourlogs).map(key => {\n        return (\n          <Column\n            key={key}\n            hourlogs={groupedHourlogs[key]}\n            header={key}\n            setOpen={setOpen}\n            setDate={setDate}\n            refetch={refetch}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\nimport moment from 'moment'\n\nconst Controls = ({ selectedModay, setSelectedMonday }) => {\n  const label = moment(selectedModay).format('WW - YYYY')\n  return (\n    <div className=\"calendar-control\">\n      <i\n        className=\"fa fa-arrow-left arrow\"\n        onClick={() => setSelectedMonday(moment(selectedModay).subtract(7, 'days'))}\n      />\n      <div className=\"viikko\">{`Week ${label}`}</div>\n      <i\n        className=\"fa fa-arrow-right arrow\"\n        onClick={() => setSelectedMonday(moment(selectedModay).add(7, 'days'))}\n      />\n    </div>\n  )\n}\n\nexport default Controls\n","import React from 'react'\nimport { timeLabel } from '../../utils/labelsFormatter'\n\nconst Header = ({ currentUser, hourlogs }) => {\n  const weekly_hours = hourlogs.loading\n    ? 'loading...'\n    : hourlogs.data.myHourlogs.reduce((accum, log) => {\n        return (accum += log.hours)\n      }, 0)\n\n  return (\n    <div className=\"ts-info-container\">\n      <div className=\"ts-info-box\">{currentUser.name}</div>\n      <div className=\"ts-info-box ts-float-right\">\n        <p>{timeLabel(weekly_hours)}</p>\n        <span>Hours this week</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useState, useEffect } from 'react'\nimport FuzzySearch from 'fuzzy-search'\nimport _ from 'lodash'\nimport { Search, Label } from 'semantic-ui-react'\n\nconst TaskSearch = ({ tasks, setTaskId, setDescription }) => {\n  const [loading, setLoading] = useState(false)\n  const [value] = useState()\n  const [results, setResults] = useState([])\n\n  useEffect(() => {\n    setResults(cathegorise(tasks.data.allTasks))\n  }, [tasks.data.allTasks])\n\n  const resultRenderer = ({ name }) => <p>{name}</p>\n\n  const categoryRenderer = ({ name }) => {\n    return <Label content={name} />\n  }\n\n  const handleResultSelect = (e, { result }) => {\n    setTaskId(result.id)\n    setDescription(result.description)\n  }\n\n  const cathegorise = tasks => {\n    return tasks.reduce((accum, task) => {\n      const { name } = task.project\n      if (!(name in accum)) {\n        accum[name] = { name, results: [] }\n      }\n      accum[name].results = accum[name].results.concat({\n        ...task,\n        title: task.name\n      })\n      return accum\n    }, {})\n  }\n\n  const handleSearchChange = (_, { value }) => {\n    setLoading(true)\n    setTimeout(() => {\n      const searcher = new FuzzySearch(\n        tasks.data.allTasks,\n        ['name', 'project.name'],\n        {\n          sort: true\n        }\n      )\n      const result = searcher.search(value)\n\n      const groupBy = cathegorise(result)\n      setResults(groupBy)\n      setLoading(false)\n    }, 500)\n  }\n\n  return (\n    <Search\n      fluid\n      input={{ fluid: true }}\n      minCharacters={0}\n      category\n      size=\"small\"\n      loading={loading}\n      onResultSelect={handleResultSelect}\n      onSearchChange={_.debounce(handleSearchChange, 500, {\n        leading: true\n      })}\n      resultRenderer={resultRenderer}\n      categoryRenderer={categoryRenderer}\n      results={results}\n      value={value}\n    />\n  )\n}\n\nexport default TaskSearch\n","import React, { useState } from 'react'\nimport { Modal, Button, Form } from 'semantic-ui-react'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport { GET_TASKS, CREATE_HOURLOG } from './GraphQL'\nimport TaskSearch from './TaskSearch'\n\nimport 'rc-time-picker/assets/index.css'\nimport TimePicker from 'rc-time-picker'\nimport moment from 'moment'\n\nconst AddHourlogModal = ({ open, setOpen, date, hourlogs }) => {\n  const [hours, setHours] = useState(0)\n  const [taskId, setTaskId] = useState(null)\n  const [description, setDescription] = useState(null)\n  const tasks = useQuery(GET_TASKS)\n  const createHourlog = useMutation(CREATE_HOURLOG)\n\n  const handleTime = value => {\n    if (!value) return setHours(null)\n    setHours(value.hours() + value.minutes() / 60)\n  }\n\n  const handleSubmit = async () => {\n    await createHourlog({\n      variables: { hours, taskId, date }\n    })\n    hourlogs.refetch()\n    setTaskId(null)\n    setHours(0)\n    setDescription(null)\n    setOpen(false)\n  }\n\n  if (!tasks.data) {\n    return null\n  }\n\n  return (\n    <div>\n      <Modal size={'tiny'} open={open} onClose={() => setOpen(false)}>\n        <Modal.Header>Delete Your Account</Modal.Header>\n\n        <Modal.Content>\n          <Form>\n            <Form.Field>\n              <label>Search for tasks by name</label>\n              <TaskSearch\n                tasks={tasks}\n                setTaskId={setTaskId}\n                setDescription={setDescription}\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>Hours</label>\n              <TimePicker\n                onChange={handleTime}\n                defaultValue={moment()\n                  .hour(0)\n                  .minute(0)}\n                defaultOpenValue={moment()\n                  .hour(0)\n                  .minute(0)}\n                showSecond={false}\n                minuteStep={15}\n              />\n            </Form.Field>\n            {description && (\n              <Form.Field>\n                <label>Task description</label>\n                <div>{description}</div>\n              </Form.Field>\n            )}\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button.Group>\n            <Button onClick={() => setOpen(false)}>Cancel</Button>\n            <Button\n              onClick={() => handleSubmit()}\n              icon=\"save\"\n              content=\"Save\"\n              color=\"blue\"\n              disabled={!taskId}\n            />\n          </Button.Group>\n        </Modal.Actions>\n      </Modal>\n    </div>\n  )\n}\n\nexport default AddHourlogModal\n","import Calendar from './Calendar'\n\nexport default Calendar\n","import React, { useState } from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport moment from 'moment'\nimport { MY_HOURLOGS } from './GraphQL'\nimport Row from './Row'\nimport Controls from './Controls'\nimport Header from './Header'\nimport AddHourlogModal from './AddHourlogModal'\n\nconst Calendar = ({ currentUser }) => {\n  const [selectedModay, setSelectedMonday] = useState(\n    moment()\n      .startOf('week')\n      .add(1, 'day')\n  )\n  const [open, setOpen] = useState(false)\n  const [date, setDate] = useState(null)\n\n  const hourlogs = useQuery(MY_HOURLOGS, {\n    variables: {\n      dateFrom: selectedModay,\n      dateTo: moment(selectedModay).add(5, 'days')\n    }\n  })\n\n  const getDayFormat = day => {\n    return moment(selectedModay)\n      .add(day, 'days')\n      .format('YYYY-MM-DD')\n  }\n\n  const groupedHourlogs = {\n    [getDayFormat(0)]: [],\n    [getDayFormat(1)]: [],\n    [getDayFormat(2)]: [],\n    [getDayFormat(3)]: [],\n    [getDayFormat(4)]: []\n  }\n\n  if (!hourlogs.loading) {\n    hourlogs.data.myHourlogs.forEach(hourlog => {\n      groupedHourlogs[moment(hourlog.date).format('YYYY-MM-DD')].push(hourlog)\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <Header currentUser={currentUser} hourlogs={hourlogs} />\n      <Controls selectedModay={selectedModay} setSelectedMonday={setSelectedMonday} />\n      <Row\n        groupedHourlogs={groupedHourlogs}\n        setOpen={setOpen}\n        setDate={setDate}\n        refetch={hourlogs}\n      />\n      <AddHourlogModal open={open} setOpen={setOpen} date={date} hourlogs={hourlogs} />\n    </React.Fragment>\n  )\n}\n\nexport default Calendar\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Icon, Menu, Sidebar, Image } from 'semantic-ui-react'\n\nconst SideBar = ({ admin }) => (\n  <div className=\"ts-nav-container\">\n    <Sidebar as={Menu} icon=\"labeled\" animation=\"slide out\" inverted vertical visible width=\"thin\">\n      <Menu.Item as=\"a\">\n        <Image src=\"logo.png\" size=\"tiny\" centered />\n      </Menu.Item>\n      <Menu.Item as={NavLink} to=\"/calendar\">\n        <Icon name=\"clock outline\" />\n        My Logs\n      </Menu.Item>\n      <Menu.Item as={NavLink} to=\"/projects\">\n        <Icon name=\"tasks\" />\n        Projects\n      </Menu.Item>\n      {admin && (\n        <Menu.Item as={NavLink} to=\"/users\">\n          <Icon name=\"user circle\" />\n          Users\n        </Menu.Item>\n      )}\n      <Menu.Item as={NavLink} to=\"/report/table\">\n        <Icon name=\"chart bar outline\" />\n        Report\n      </Menu.Item>\n      <Menu.Item as={NavLink} to=\"/logout\">\n        <Icon name=\"sign-out\" />\n        Sign out\n      </Menu.Item>\n    </Sidebar>\n  </div>\n)\n\nexport default SideBar\n","import React from 'react'\nimport { Dimmer, Loader as SemanticLoader } from 'semantic-ui-react'\n\nconst Loader = () => {\n  return (\n    <Dimmer active inverted>\n      <SemanticLoader inverted>Loading</SemanticLoader>\n    </Dimmer>\n  )\n}\n\nexport default Loader\n","import React, { useState, useEffect } from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport { Button, Input, ButtonGroup, Icon, Label } from 'semantic-ui-react'\n\nconst UPDATE_PROJECT = gql`\n  mutation updateProject($id: String!, $name: String!) {\n    updateProject(id: $id, name: $name) {\n      name\n    }\n  }\n`\n\nconst ProjectHeader = ({ admin, editMode, setEditMode, project, projects }) => {\n  const [name, setName] = useState()\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false)\n\n  const updateProject = useMutation(UPDATE_PROJECT)\n\n  useEffect(() => {\n    setName(project.name)\n  }, [project.name])\n\n  const handleSubmit = async () => {\n    try {\n      await updateProject({ variables: { name, id: project.id } })\n      await projects.refetch()\n      setSuccess(true)\n    } catch (error) {\n      setError(true)\n    }\n    setTimeout(() => {\n      setError(false)\n      setSuccess(false)\n    }, 3000)\n  }\n\n  if (success) {\n    return (\n      <div>\n        <Icon color=\"green\" name=\"check\" />\n        <Label color=\"green\" content=\"Project Saved\" />\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div>\n        <Icon color=\"red\" name=\"close\" />\n        <Label\n          color=\"red\"\n          content=\"Project not saved. Project name must be unique.\"\n        />\n      </div>\n    )\n  }\n\n  if (!admin) return project.name\n\n  if (!editMode) {\n    return (\n      <React.Fragment>\n        {project.name}\n        <Button\n          onClick={() => setEditMode(!editMode)}\n          style={{ float: 'right' }}\n          content=\"Edit Project\"\n          icon=\"edit\"\n        />\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <div>\n      <Input fluid defaultValue={project.name}>\n        <input onChange={({ target }) => setName(target.value)} />\n        <ButtonGroup style={{ float: 'right' }}>\n          <Button\n            onClick={() => setEditMode(!editMode)}\n            icon=\"close\"\n            content=\"Cancel\"\n          />\n          <Button\n            onClick={() => handleSubmit()}\n            icon=\"save\"\n            color=\"green\"\n            content=\"Save\"\n          />\n        </ButtonGroup>\n      </Input>\n    </div>\n  )\n}\n\nexport default ProjectHeader\n","import React from 'react'\nimport { Icon } from 'semantic-ui-react'\nimport { colorLabels } from '../../utils/labelsFormatter'\n\nconst TaskColor = ({ color, setColor }) => {\n  return (\n    <div>\n      {colorLabels.map(c => {\n        return (\n          <Icon\n            key={c.id}\n            size={c.id === color ? 'huge' : 'big'}\n            name=\"square full\"\n            onClick={() => setColor(c.id)}\n            style={{ color: c.color }}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default TaskColor\n","import React, { useState } from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport { Table, Button, Form, ButtonGroup } from 'semantic-ui-react'\nimport { Message, Icon } from 'semantic-ui-react'\nimport TaskColor from './TaskColor'\n\nconst CREATE_TASK = gql`\n  mutation createTask(\n    $name: String!\n    $projectId: String!\n    $description: String\n    $color: Int\n  ) {\n    createTask(\n      name: $name\n      description: $description\n      color: $color\n      projectId: $projectId\n    ) {\n      id\n      name\n    }\n  }\n`\n\nconst ProjectFooter = ({ editMode, projects, project }) => {\n  const [open, setOpen] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false)\n  const [name, setName] = useState()\n  const [color, setColor] = useState(Math.floor(Math.random() * 15))\n  const [description, setDescription] = useState()\n\n  const createTask = useMutation(CREATE_TASK)\n\n  const handelSubmit = async () => {\n    try {\n      await createTask({\n        variables: { name, description, color, projectId: project.id }\n      })\n      setSuccess(true)\n      setTimeout(async () => {\n        await projects.refetch()\n        setSuccess(false)\n        setOpen(false)\n      }, 4000)\n    } catch (error) {\n      setError(true)\n      setTimeout(async () => {\n        setError(false)\n        setOpen(false)\n      }, 4000)\n    }\n  }\n\n  if (!editMode) return null\n\n  if (success || error) {\n    return (\n      <Table.Footer>\n        <Table.Row>\n          <Table.HeaderCell colSpan=\"4\" color=\"teal\">\n            {success && (\n              <Message icon color=\"green\">\n                <Icon name=\"check\" color=\"green\" />\n                <Message.Content>\n                  <Message.Header>New task added</Message.Header>\n                  We are fetching that content for you.\n                </Message.Content>\n              </Message>\n            )}\n            {error && (\n              <Message icon color=\"red\">\n                <Icon name=\"cancel\" color=\"red\" />\n                <Message.Content>\n                  <Message.Header>Task creation failed.</Message.Header>\n                </Message.Content>\n              </Message>\n            )}\n          </Table.HeaderCell>\n        </Table.Row>\n      </Table.Footer>\n    )\n  }\n\n  if (open) {\n    return (\n      <Table.Footer>\n        <Table.Row>\n          <Table.HeaderCell colSpan=\"4\" color=\"teal\">\n            <Form>\n              <Form.Field>\n                <label>Task name</label>\n                <input\n                  onChange={({ target }) => setName(target.value)}\n                  placeholder=\"Task name\"\n                />\n              </Form.Field>\n              <Form.Field>\n                <label>Task description</label>\n                <input\n                  onChange={({ target }) => setDescription(target.value)}\n                  placeholder=\"Task description\"\n                />\n              </Form.Field>\n              <Form.Field>\n                <label>Choose color for Task</label>\n                <TaskColor color={color} setColor={setColor} />\n              </Form.Field>\n              <ButtonGroup fluid>\n                <Button\n                  onClick={() => setOpen(false)}\n                  content=\"Close without saving\"\n                  icon=\"close\"\n                />\n                <Button\n                  onClick={() => handelSubmit()}\n                  content=\"Save\"\n                  color=\"green\"\n                  icon=\"save\"\n                />\n              </ButtonGroup>\n            </Form>\n          </Table.HeaderCell>\n        </Table.Row>\n      </Table.Footer>\n    )\n  }\n\n  return (\n    <Table.Footer>\n      <Table.Row>\n        <Table.HeaderCell colSpan=\"4\" color=\"teal\">\n          <Button\n            fluid\n            content=\"Add new Task to this Project\"\n            onClick={() => setOpen(true)}\n            icon=\"add\"\n            labelPosition=\"left\"\n          />\n        </Table.HeaderCell>\n      </Table.Row>\n    </Table.Footer>\n  )\n}\n\nexport default ProjectFooter\n","import React, { useState } from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport { Table, Icon, Button, ButtonGroup } from 'semantic-ui-react'\nimport { Input, Dropdown } from 'semantic-ui-react'\nimport { getColorById, colorLabels } from '../../utils/labelsFormatter'\n\nconst UPDATE_TASK = gql`\n  mutation updateTask(\n    $name: String\n    $id: String!\n    $color: Int\n    $description: String\n  ) {\n    updateTask(id: $id, name: $name, color: $color, description: $description) {\n      id\n    }\n  }\n`\n\nconst TaskCell = ({ editMode, task, projects }) => {\n  const [open, setOpen] = useState(false)\n  const [color, setColor] = useState(task.color)\n  const [name, setName] = useState(task.name)\n  const [description, setDescription] = useState(task.description)\n\n  const updateTask = useMutation(UPDATE_TASK)\n\n  const handeleSubmit = async () => {\n    await updateTask({ variables: { id: task.id, color, name, description } })\n    await projects.refetch()\n    setOpen(false)\n  }\n\n  const dropdownOptions = colorLabels.map(c => {\n    return {\n      key: c.id,\n      value: c.id,\n      icon: 'square full',\n      text: `color-${c.id}`,\n      style: { color: c.color }\n    }\n  })\n  if (open && editMode) {\n    return (\n      <Table.Row>\n        <Table.Cell>\n          <ButtonGroup>\n            <Button onClick={() => setOpen(false)} icon=\"close\" />\n            <Button\n              onClick={() => handeleSubmit()}\n              content=\"Save\"\n              color=\"green\"\n            />\n          </ButtonGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <Input\n            defaultValue={task.name}\n            onChange={(_, data) => setName(data.value)}\n          />\n        </Table.Cell>\n        <Table.Cell>\n          <Input\n            defaultValue={task.description}\n            onChange={(_, data) => setDescription(data.value)}\n          />\n        </Table.Cell>\n        <Table.Cell>\n          <Dropdown\n            onChange={(_, data) => setColor(data.value)}\n            icon=\"square full\"\n            style={{ color: getColorById(color) }}\n            options={dropdownOptions}\n            selection\n            pointing=\"bottom right\"\n            defaultValue={task.color}\n          />\n        </Table.Cell>\n      </Table.Row>\n    )\n  }\n\n  return (\n    <Table.Row>\n      {editMode && (\n        <Table.Cell>\n          <Button\n            onClick={() => setOpen(true)}\n            size=\"tiny\"\n            icon=\"edit\"\n            color=\"teal\"\n            content=\"Edit\"\n            labelPosition=\"left\"\n          />\n        </Table.Cell>\n      )}\n      <Table.Cell>{task.name}</Table.Cell>\n      <Table.Cell>{task.description}</Table.Cell>\n      <Table.Cell textAlign=\"center\">\n        <Icon\n          name=\"square full\"\n          size=\"large\"\n          style={{ color: getColorById(task.color) }}\n        />\n      </Table.Cell>\n    </Table.Row>\n  )\n}\n\nexport default TaskCell\n","import React, { useState } from 'react'\nimport { Table } from 'semantic-ui-react'\nimport ProjectHeader from './ProjectHeader'\nimport ProjectFooter from './ProjectFooter'\nimport TaskCell from './TaskCell'\n\nconst ProjectTable = ({ projects, project, admin }) => {\n  const [editMode, setEditMode] = useState(false)\n  return (\n    <Table color=\"green\" celled striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan=\"4\">\n            <ProjectHeader\n              projects={projects}\n              project={project}\n              admin={admin}\n              editMode={editMode}\n              setEditMode={setEditMode}\n            />\n          </Table.HeaderCell>\n        </Table.Row>\n        <Table.Row>\n          {admin && editMode && <Table.HeaderCell>Edit</Table.HeaderCell>}\n          <Table.HeaderCell width=\"5\">Tasks of The Project</Table.HeaderCell>\n          <Table.HeaderCell>Task Description</Table.HeaderCell>\n          <Table.HeaderCell>Color</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {project.tasks.map(task => {\n          return (\n            <TaskCell\n              projects={projects}\n              key={task.id}\n              task={task}\n              editMode={editMode}\n            />\n          )\n        })}\n      </Table.Body>\n      <ProjectFooter\n        projects={projects}\n        editMode={editMode}\n        project={project}\n      />\n    </Table>\n  )\n}\n\nexport default ProjectTable\n","import React, { useState } from 'react'\nimport { useMutation } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport { ButtonGroup, Button, Form, Message } from 'semantic-ui-react'\n\nconst CREATE_PROJECT = gql`\n  mutation createProject($name: String!) {\n    createProject(name: $name) {\n      id\n      name\n    }\n  }\n`\n\nconst AddForm = ({ setOpen, projects }) => {\n  const [name, setName] = useState()\n  const [message, setMessage] = useState()\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false)\n\n  const createProject = useMutation(CREATE_PROJECT)\n\n  const handleSubmit = async () => {\n    try {\n      await createProject({ variables: { name } })\n      setSuccess(true)\n      await projects.refetch()\n    } catch (error) {\n      setMessage('Invalid Project name. Unique name is required.')\n      setError(true)\n    }\n  }\n\n  const handleDismiss = () => {\n    setName(undefined)\n    setMessage(false)\n    setError(false)\n    setSuccess(false)\n  }\n\n  if (success) {\n    return (\n      <Message color=\"green\" onDismiss={() => handleDismiss()}>\n        <Message.Header>Your project creation was successful</Message.Header>\n        <p>\n          Project by name <b>{name}</b> was created. Project can now be found\n          below.\n        </p>\n      </Message>\n    )\n  }\n\n  if (error) {\n    return (\n      <Message color=\"red\" onDismiss={() => handleDismiss()}>\n        <Message.Header>Error</Message.Header>\n        <p>{message}</p>\n      </Message>\n    )\n  }\n\n  return (\n    <Form>\n      <Form.Field>\n        <label>Project name</label>\n        <input\n          onChange={({ target }) => setName(target.value)}\n          name=\"project_name\"\n          placeholder=\"Project Name\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <ButtonGroup>\n          <Button\n            type=\"button\"\n            icon=\"close\"\n            content={'close'}\n            onClick={() => setOpen(false)}\n          />\n          <Button\n            type=\"button\"\n            color=\"teal\"\n            content={'submit'}\n            onClick={() => handleSubmit()}\n          />\n        </ButtonGroup>\n      </Form.Field>\n    </Form>\n  )\n}\n\nexport default AddForm\n","import React, { useState } from 'react'\nimport { Button, Segment } from 'semantic-ui-react'\nimport AddForm from './AddForm'\n\nconst AddProject = ({ projects }) => {\n  const [open, setOpen] = useState(false)\n\n  if (open) {\n    return (\n      <Segment style={{ marginBottom: '50px' }}>\n        <AddForm projects={projects} open={open} setOpen={setOpen} />\n      </Segment>\n    )\n  }\n\n  return (\n    <div>\n      <Button\n        onClick={() => setOpen(!open)}\n        style={{ marginBottom: '50px' }}\n        icon=\"add\"\n        content=\"Add New Project\"\n      />\n    </div>\n  )\n}\n\nexport default AddProject\n","import React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport { gql } from 'apollo-boost'\nimport Loader from '../Loader'\nimport ProjectTable from './ProjectTable'\nimport AddProject from './AddProject'\n\nconst GET_PROJECTS = gql`\n  query allProjects {\n    allProjects {\n      name\n      id\n      tasks {\n        name\n        id\n        description\n        color\n      }\n    }\n  }\n`\n\nconst Project = ({ currentUser: { admin } }) => {\n  const projects = useQuery(GET_PROJECTS)\n\n  if (projects.loading) return <Loader />\n\n  return (\n    <div className=\"sideBar-room\">\n      {admin && <AddProject projects={projects} />}\n      {projects.data.allProjects.map(p => (\n        <ProjectTable\n          projects={projects}\n          admin={admin}\n          key={p.id}\n          project={p}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default Project\n","import Project from './Project'\n\nexport default Project\n","import React, { useState } from 'react'\nimport { Table, Label, Input } from 'semantic-ui-react'\nimport { useMutation } from 'react-apollo-hooks'\nimport gql from 'graphql-tag'\n\nconst UPDATE_PAY = gql`\n  mutation updateUserById($id: String!, $payByHour: Float!) {\n    updateUserById(id: $id, payByHour: $payByHour) {\n      id\n      name\n      payByHour\n    }\n  }\n`\n\nconst Pay = ({ user, users }) => {\n  const [open, setOpen] = useState(false)\n  const [pay, setPay] = useState()\n\n  const updatePay = useMutation(UPDATE_PAY)\n\n  const handleSubmit = async () => {\n    if (pay) {\n      await updatePay({ variables: { id: user.id, payByHour: parseFloat(pay) } })\n      await users.refetch()\n    }\n    setPay(undefined)\n    setOpen(false)\n  }\n\n  if (open) {\n    return (\n      <Table.Cell textAlign=\"center\">\n        <Input\n          action={{\n            color: 'teal',\n            labelPosition: 'left',\n            icon: 'euro',\n            content: 'Set pay',\n            onClick: () => {\n              handleSubmit()\n            }\n          }}\n          onChange={({ target }) => setPay(target.value)}\n          actionPosition=\"left\"\n          defaultValue={user.payByHour || 0.0}\n        />\n      </Table.Cell>\n    )\n  }\n  return (\n    <Table.Cell textAlign=\"center\">\n      <Label onClick={() => setOpen(true)} icon=\"euro\" content={user.payByHour || 0.0} />\n    </Table.Cell>\n  )\n}\n\nexport default Pay\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport gql from 'graphql-tag'\nimport { Table, Button, Icon, Confirm } from 'semantic-ui-react'\nimport Loader from '../Loader'\nimport Pay from './Pay'\n\nconst ALL_USERS = gql`\n  query {\n    allUsers {\n      id\n      username\n      name\n      admin\n      payByHour\n    }\n  }\n`\n\nconst GRANT_ADMIN = gql`\n  mutation updateUserById($id: String!, $admin: Boolean) {\n    updateUserById(id: $id, admin: $admin) {\n      username\n      name\n      id\n      admin\n    }\n  }\n`\n\nconst User = () => {\n  const [user, setUser] = useState({ name: null })\n  const [open, setOpen] = useState(false)\n\n  const users = useQuery(ALL_USERS)\n  const grantAdmin = useMutation(GRANT_ADMIN)\n\n  const handleAdminGrant = user => {\n    setUser(user)\n    setOpen(true)\n  }\n\n  const handleCancel = () => {\n    setUser({ name: null })\n    setOpen(false)\n  }\n\n  const handleConfirm = async () => {\n    console.log(user)\n    await grantAdmin({ variables: { id: user.id, admin: true } })\n    await users.refetch()\n    setOpen(false)\n  }\n\n  if (users.loading) return <Loader />\n\n  return (\n    <div className=\"sideBar-room\">\n      <Table celled striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Username</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Admin</Table.HeaderCell>\n            <Table.HeaderCell>Pay by Hour</Table.HeaderCell>\n            <Table.HeaderCell>Hourlogs</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {users.data.allUsers.map(user => {\n            return (\n              <Table.Row key={user.id}>\n                <Table.Cell>{user.username}</Table.Cell>\n                <Table.Cell>{user.name}</Table.Cell>\n                <Table.Cell textAlign=\"center\">\n                  {user.admin && <Icon size=\"large\" name=\"check\" color=\"green\" />}\n                  {!user.admin && (\n                    <Button onClick={() => handleAdminGrant(user)} icon=\"unlock\" size=\"large\" />\n                  )}\n                </Table.Cell>\n                <Pay user={user} users={users} />\n                <Table.Cell textAlign=\"center\">\n                  <Button icon=\"clock\" content=\"Hourlogs\" />\n                </Table.Cell>\n              </Table.Row>\n            )\n          })}\n        </Table.Body>\n      </Table>\n      <Confirm\n        size=\"tiny\"\n        content={`Are you sure you want to make ${user.name} admin?`}\n        open={open}\n        onCancel={handleCancel}\n        onConfirm={handleConfirm}\n      />\n    </div>\n  )\n}\n\nexport default User\n","import User from './User'\n\nexport default User\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Segment, Button, Label, Menu, Icon, Grid } from 'semantic-ui-react'\nimport { Slider } from 'react-semantic-ui-range'\nimport moment from 'moment'\n\nconst ReportMenu = props => {\n  const { dateFrom, dateTo, setDateFrom, setDateTo, match } = props\n  const handleYearDecrement = () => {\n    setDateFrom(\n      moment(dateFrom)\n        .subtract(1, 'year')\n        .format('YYYY-MM-DD')\n    )\n    setDateTo(\n      moment(dateTo)\n        .subtract(1, 'year')\n        .format('YYYY-MM-DD')\n    )\n  }\n\n  const handleYearIncrement = () => {\n    setDateFrom(\n      moment(dateFrom)\n        .add(1, 'year')\n        .format('YYYY-MM-DD')\n    )\n    setDateTo(\n      moment(dateTo)\n        .add(1, 'year')\n        .format('YYYY-MM-DD')\n    )\n  }\n\n  const handleMonthSlider = value => {\n    setDateFrom(moment(dateFrom).month(value[0]))\n    setDateTo(moment(dateTo).month(value[1]))\n  }\n\n  return (\n    <Segment>\n      <Menu icon=\"labeled\">\n        <Menu.Item as={NavLink} to=\"/report/table\" active={match.url === '/report/table'}>\n          <Icon name=\"table\" /> Table\n        </Menu.Item>\n        <Menu.Item as={NavLink} to=\"/report/chart\" active={match.url === '/report/chart'}>\n          <Icon name=\"pie chart\" />\n          Charts\n        </Menu.Item>\n      </Menu>\n      <Grid>\n        <Grid.Column width=\"13\" textAlign=\"center\">\n          <Segment>\n            <Label attached=\"top\">\n              {moment(dateFrom).format('MMMM YYYY')} - {moment(dateTo).format('MMMM YYYY')}\n            </Label>\n            <Slider\n              multiple\n              color=\"green\"\n              settings={{\n                start: [0, 11],\n                min: 0,\n                max: 11,\n                step: 1,\n                onChange: value => handleMonthSlider(value)\n              }}\n            />\n          </Segment>\n        </Grid.Column>\n        <Grid.Column width=\"3\" textAlign=\"center\">\n          <Segment>\n            <Label attached=\"top\">Select Year</Label>\n            <Button.Group size=\"mini\">\n              <Button icon=\"minus\" onClick={handleYearDecrement} />\n              <Label>{moment(dateFrom).year()}</Label>\n              <Button icon=\"plus\" onClick={handleYearIncrement} />\n            </Button.Group>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  )\n}\n\nexport default ReportMenu\n","import React from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst ReportTable = ({ projects }) => {\n  if (!projects.data.allProjects) return <p>loading . . . .</p>\n\n  const { allProjects } = projects.data\n\n  const totalCost = Math.floor(allProjects.reduce((a, c) => (a += c.cost), 0) * 100) / 100\n\n  return (\n    <Table>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Name</Table.HeaderCell>\n          <Table.HeaderCell>Total Hours</Table.HeaderCell>\n          <Table.HeaderCell>Total Costs</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {allProjects.map(p => {\n          return (\n            <Table.Row key={p.name}>\n              <Table.Cell>{p.name}</Table.Cell>\n              <Table.Cell>{p.hours} h</Table.Cell>\n              <Table.Cell>{p.cost} €</Table.Cell>\n            </Table.Row>\n          )\n        })}\n      </Table.Body>\n      <Table.Footer>\n        <Table.Row style={{ fontWeight: 'Bold' }}>\n          <Table.Cell>Total</Table.Cell>\n          <Table.Cell>{allProjects.reduce((a, c) => (a += c.hours), 0)} h</Table.Cell>\n          <Table.Cell>{totalCost} €</Table.Cell>\n        </Table.Row>\n      </Table.Footer>\n    </Table>\n  )\n}\n\nexport default ReportTable\n","import React from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport { useQuery } from 'react-apollo-hooks'\nimport gql from 'graphql-tag'\nimport moment from 'moment'\n\nconst GET_HOURLOGS = gql`\n  query allHourlogs($dateFrom: String, $dateTo: String) {\n    allHourlogs(dateFrom: $dateFrom, dateTo: $dateTo) {\n      hours\n      date\n    }\n  }\n`\n\nconst PROJECT_HOURLOGS = gql`\n  query projectById($id: String!, $dateFrom: String, $dateTo: String) {\n    projectById(id: $id) {\n      hourlogs(dateFrom: $dateFrom, dateTo: $dateTo) {\n        date\n        hours\n      }\n    }\n  }\n`\n\nconst TimelineBar = ({ dateTo, dateFrom, id }) => {\n  const query_string = id ? PROJECT_HOURLOGS : GET_HOURLOGS\n  const query = useQuery(query_string, { variables: { id, dateFrom, dateTo } })\n  const dataString = id ? 'projectById' : 'allHourlogs'\n\n  const data = query.data[dataString] ? query.data[dataString] : [{ date: dateFrom, hours: 0 }]\n\n  const hourlogs = id ? data.hourlogs : data\n\n  let firstMonth = moment(dateFrom).month()\n  let lastMonth = moment(dateTo).month()\n  const months = {}\n  while (firstMonth <= lastMonth) {\n    months[firstMonth] = {\n      name: moment()\n        .month(firstMonth)\n        .format('MMMM'),\n      hours: 0\n    }\n    firstMonth++\n  }\n\n  if (hourlogs) {\n    hourlogs.forEach(log => {\n      const date = moment(log.date).month()\n      months[date].hours = months[date].hours + log.hours\n    })\n  }\n\n  const groupByMonth = Object.values(months)\n\n  const labels = groupByMonth.map(p => p.name)\n  const hours = groupByMonth.map(p => p.hours)\n\n  const timelineData = {\n    labels,\n    datasets: [\n      {\n        data: hours,\n        backgroundColor: '#4287f555'\n      }\n    ]\n  }\n\n  return (\n    <Bar\n      data={timelineData}\n      options={{\n        legend: { display: false },\n        title: {\n          display: true,\n          text: `Hours logged during ${moment(dateFrom).format('MMMM YYYY')} - ${moment(\n            dateTo\n          ).format('MMMM YYYY')}`\n        }\n      }}\n    />\n  )\n}\n\nexport default TimelineBar\n","import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Grid, Segment, Container } from 'semantic-ui-react'\nimport { Pie } from 'react-chartjs-2'\nimport { getRandomColor } from '../../utils/labelsFormatter'\nimport TimelineBar from './TimelineBar'\n\nconst ReportChart = props => {\n  const { projects, dateFrom, dateTo } = props\n  const [redirect, setRedirect] = useState(undefined)\n  // Placeholders are important for stable rendering\n  const allProjects = projects.data.allProjects || [\n    { name: 'placeholder', hours: 300 },\n    { name: 'placeholder', hours: 50 },\n    { name: 'placeholder', hours: 100 }\n  ]\n\n  const labels = allProjects.map(p => p.name)\n  const hours = allProjects.map(p => p.hours)\n  const cost = allProjects.map(p => p.cost)\n  const backgroundColor = allProjects.map(() => {\n    return getRandomColor()\n  })\n\n  const handlePieClick = e => {\n    if (e[0]) setRedirect(allProjects[e[0]._index].id)\n  }\n\n  const hourData = {\n    labels,\n    datasets: [\n      {\n        data: hours,\n        backgroundColor\n      }\n    ]\n  }\n\n  const costData = {\n    labels,\n    datasets: [\n      {\n        data: cost,\n        backgroundColor\n      }\n    ]\n  }\n\n  if (redirect) {\n    return <Redirect to={`/report/project/${redirect}`} />\n  }\n\n  return (\n    <Container>\n      <Grid>\n        <Grid.Column width=\"9\">\n          <Segment>\n            <Pie\n              data={hourData}\n              onElementsClick={e => handlePieClick(e)}\n              options={{\n                legend: { position: 'left' },\n                title: { display: true, text: 'Hours used by Project' }\n              }}\n            />\n          </Segment>\n        </Grid.Column>\n        <Grid.Column width=\"7\">\n          <Segment>\n            <Pie\n              data={costData}\n              onElementsClick={e => handlePieClick(e)}\n              options={{\n                legend: { display: false },\n                title: { display: true, text: 'Costs in euros by Project' }\n              }}\n            />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n      <Grid>\n        <Grid.Column width=\"16\">\n          <Segment>\n            <TimelineBar dateFrom={dateFrom} dateTo={dateTo} />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  )\n}\n\nexport default ReportChart\n","import React from 'react'\nimport { Segment, Container, Grid, List } from 'semantic-ui-react'\nimport { Pie } from 'react-chartjs-2'\nimport gql from 'graphql-tag'\nimport { useQuery } from 'react-apollo-hooks'\nimport { getColorById } from '../../utils/labelsFormatter'\nimport TimelineBar from './TimelineBar'\n\nconst PROJECT_BY_ID = gql`\n  query projectById($id: String!, $dateFrom: String, $dateTo: String) {\n    projectById(id: $id) {\n      name\n      cost(dateFrom: $dateFrom, dateTo: $dateTo)\n      hours(dateFrom: $dateFrom, dateTo: $dateTo)\n      tasks {\n        color\n        name\n        cost(dateFrom: $dateFrom, dateTo: $dateTo)\n        hours(dateFrom: $dateFrom, dateTo: $dateTo)\n      }\n    }\n  }\n`\n\nconst ProjectDashboard = ({ id, dateFrom, dateTo }) => {\n  const project = useQuery(PROJECT_BY_ID, { variables: { id, dateFrom, dateTo } })\n\n  const projectById = project.data.projectById || {\n    name: 'Placeholder',\n    cost: 100,\n    hours: 100,\n    tasks: [\n      { name: 'placeholder0', hours: 300, cost: 10, color: 1 },\n      { name: 'placeholder1', hours: 50, cost: 300, color: 2 },\n      { name: 'placeholder2', hours: 100, cost: 70, color: 3 }\n    ]\n  }\n\n  const labels = projectById.tasks.map(t => t.name)\n  const hours = projectById.tasks.map(t => t.hours)\n  const backgroundColor = projectById.tasks.map(t => {\n    return getColorById(t.color)\n  })\n\n  const hourData = {\n    labels,\n    datasets: [\n      {\n        data: hours,\n        backgroundColor\n      }\n    ]\n  }\n\n  return (\n    <Container>\n      <Grid>\n        <Grid.Column width=\"6\">\n          <Segment>\n            <h4>{projectById.name}</h4>\n            <List>\n              {projectById.tasks.map(t => {\n                return (\n                  <List.Item key={t.name}>\n                    <List.Icon name=\"clock outline\" verticalAlign=\"middle\" size=\"large\" />\n                    <List.Content>\n                      <List.Header>{t.name}</List.Header>\n                      <List.Description>{t.hours} h</List.Description>\n                    </List.Content>\n                  </List.Item>\n                )\n              })}\n            </List>\n          </Segment>\n        </Grid.Column>\n        <Grid.Column width=\"10\">\n          <Segment>\n            <Pie\n              data={hourData}\n              options={{\n                legend: { display: true, position: 'left' },\n                title: { display: true, text: 'Project Hours by Tasks' }\n              }}\n            />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n      <Grid>\n        <Grid.Column width=\"16\">\n          <Segment>\n            <TimelineBar id={id} dateFrom={dateFrom} dateTo={dateTo} />\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  )\n}\n\nexport default ProjectDashboard\n","import React, { useState } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery } from 'react-apollo-hooks'\nimport { Switch, Route } from 'react-router-dom'\nimport moment from 'moment'\nimport ReportMenu from './ReportMenu'\nimport ReportTable from './ReportTable'\nimport ReportChart from './ReportChart'\nimport ProjectDashboard from './ProjectDashboard'\n\nconst ALL_PROJECTS = gql`\n  query allProjects($dateFrom: String!, $dateTo: String!) {\n    allProjects {\n      name\n      id\n      hours(dateFrom: $dateFrom, dateTo: $dateTo)\n      cost(dateFrom: $dateFrom, dateTo: $dateTo)\n    }\n  }\n`\n\nconst Report = ({ match }) => {\n  const [dateFrom, setDateFrom] = useState(\n    moment()\n      .startOf('year')\n      .format('YYYY-MM-DD')\n  )\n  const [dateTo, setDateTo] = useState(\n    moment()\n      .endOf('year')\n      .format('YYYY-MM-DD')\n  )\n\n  const projects = useQuery(ALL_PROJECTS, {\n    variables: { dateFrom, dateTo }\n  })\n\n  return (\n    <div>\n      <ReportMenu\n        dateFrom={dateFrom}\n        dateTo={dateTo}\n        setDateFrom={setDateFrom}\n        setDateTo={setDateTo}\n        match={match}\n      />\n      <Switch>\n        <Route path=\"/report/table\" render={() => <ReportTable projects={projects} />} />\n        <Route\n          path=\"/report/chart\"\n          render={() => <ReportChart dateFrom={dateFrom} dateTo={dateTo} projects={projects} />}\n        />\n        <Route\n          path=\"/report/project/:id\"\n          render={({ match }) => (\n            <ProjectDashboard id={match.params.id} dateFrom={dateFrom} dateTo={dateTo} />\n          )}\n        />\n      </Switch>\n    </div>\n  )\n}\n\nexport default Report\n","import Report from './Report'\n\nexport default Report\n","import React, { useState } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport Login from './components/Login'\nimport Logout from './components/Logout'\nimport Register from './components/Register'\nimport Calendar from './components/Calendar'\nimport SideBar from './components/SideBar'\nimport Project from './components/Project'\nimport User from './components/User'\nimport Report from './components/Report'\n\nimport './App.css'\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState()\n\n  if (!currentUser) {\n    return (\n      <div>\n        <Switch>\n          <Route path=\"/login\" render={() => <Login setCurrentUser={setCurrentUser} />} />\n          <Route path=\"/register\" render={() => <Register setCurrentUser={setCurrentUser} />} />\n          <Redirect path=\"/\" to=\"/login\" />\n        </Switch>\n      </div>\n    )\n  }\n  return (\n    <div className=\"main-container\">\n      <SideBar admin={currentUser.admin} />\n      <div className=\"content-container\">\n        <Switch>\n          <Route path=\"/calendar\" render={() => <Calendar currentUser={currentUser} />} />\n          <Route path=\"/users\" render={() => <User />} />\n          <Route\n            path={['/report/table', '/report/chart', '/report/project/:id']}\n            render={({ match }) => <Report match={match} />}\n          />\n          <Redirect path=\"/report\" to=\"/report/table\" />\n          <Route path=\"/logout\" render={() => <Logout setCurrentUser={setCurrentUser} />} />\n          <Route path=\"/projects\" render={() => <Project currentUser={currentUser} />} />\n          <Redirect path=\"/\" to=\"/calendar\" />\n        </Switch>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport 'font-awesome/css/font-awesome.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css'\n\nimport App from './App'\n\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks'\n\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: { reconnect: true }\n})\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql'\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    return {\n      headers: {\n        ...headers,\n        'x-auth-token': token ? token : null\n      }\n    }\n  } else {\n    return {\n      headers: {\n        ...headers\n      }\n    }\n  }\n})\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}